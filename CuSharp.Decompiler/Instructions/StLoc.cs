// Copyright (c) 2014-2020 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

using System.Diagnostics;

namespace Dotnet4Gpu.Decompilation.Instructions
{
    public sealed class StLoc : ILInstruction, IStoreInstruction
    {
        public StLoc(ILVariable variable, ILInstruction value) : base(OpCode.StLoc)
        {
            _variable = variable ?? throw new ArgumentNullException(nameof(variable));
            Value = value;
        }

        private ILVariable _variable;
        public ILVariable Variable
        {
            get => _variable;
            set
            {
                DebugAssert(value != null);
                if (IsConnected)
                    _variable.RemoveStoreInstruction(this);
                _variable = value;
                if (IsConnected)
                    _variable.AddStoreInstruction(this);
            }
        }

        public int IndexInStoreInstructionList { get; set; } = -1;

        int IInstructionWithVariableOperand.IndexInVariableInstructionMapping
        {
            get => IndexInStoreInstructionList;
            set => IndexInStoreInstructionList = value;
        }

        protected override void Connected()
        {
            base.Connected();
            _variable.AddStoreInstruction(this);
        }

        protected override void Disconnected()
        {
            _variable.RemoveStoreInstruction(this);
            base.Disconnected();
        }

        public static readonly SlotInfo ValueSlot = new("Value", canInlineInto: true);
        private ILInstruction _value = null!;
        public ILInstruction Value
        {
            get => _value;
            set
            {
                ValidateChild(value);
                SetChildInstruction(ref _value, value, 0);
            }
        }
        protected override int GetChildCount()
        {
            return 1;
        }
        protected override ILInstruction GetChild(int index)
        {
            return index == 0 ? _value : throw new IndexOutOfRangeException();
        }
        protected override void SetChild(int index, ILInstruction value)
        {
            Value = index == 0 ? value : throw new IndexOutOfRangeException();
        }
        protected override SlotInfo GetChildSlot(int index)
        {
            return index == 0 ? ValueSlot : throw new IndexOutOfRangeException();
        }
        public override ILInstruction Clone()
        {
            var clone = (StLoc)ShallowClone();
            clone.Value = _value.Clone();
            return clone;
        }
        public override StackType ResultType => _variable.StackType;

        protected override InstructionFlags ComputeFlags()
        {
            return InstructionFlags.MayWriteLocals | _value.Flags;
        }
        public override InstructionFlags DirectFlags => InstructionFlags.MayWriteLocals;

        public override void AcceptVisitor(ILVisitor visitor)
        {
            visitor.VisitStLoc(this);
        }
        public override T AcceptVisitor<T>(ILVisitor<T> visitor)
        {
            return visitor.VisitStLoc(this);
        }

        /// <summary>
        /// If true, this stloc represents a stack type adjustment.
        /// This field is only used in ILReader and BlockBuilder, and should be ignored by ILAst transforms.
        /// </summary>
        internal bool IsStackAdjustment;

        /// <summary>
        /// Gets whether the IL stack was empty after this store.
        /// Only set for store instructions from the IL; not for stores to the stack
        /// or other stores generated by transforms.
        /// </summary>
        internal bool ILStackWasEmpty;

        internal override void CheckInvariant(ILPhase phase)
        {
            base.CheckInvariant(phase);
            Debug.Assert(phase <= ILPhase.InILReader || this.IsDescendantOf(_variable.Function!));
            Debug.Assert(phase <= ILPhase.InILReader || _variable.Function!.Variables[_variable.IndexInFunction] == _variable);
            Debug.Assert(_value.ResultType == _variable.StackType);
        }
    }
}
